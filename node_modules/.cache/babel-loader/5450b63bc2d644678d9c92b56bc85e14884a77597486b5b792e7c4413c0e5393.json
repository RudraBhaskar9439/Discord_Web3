{"ast":null,"code":"var _jsxFileName = \"/Users/rudrabhaskar/Desktop/discord_dapp/dappcord/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { io } from \"socket.io-client\";\n\n// Components\nimport Navigation from './components/Navigation';\nimport Servers from './components/Servers';\nimport Channels from './components/Channels';\nimport Messages from './components/Messages';\n\n// ABIs\nimport Dappcord from './abis/Dappcord.json';\n\n// Config\nimport config from './config.json';\n\n// Socket\n// const socket = io('ws://localhost:3030');\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [dappcord, setDappcord] = useState(null);\n  const loadBlockchainData = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    setProvider(provider);\n    const network = await provider.getNetwork();\n    const dappcord = new ethers.Contract(config[network.chainId].Dappcord.address, Dappcord, provider);\n    setDappcord(dappcord);\n    const totalChannels = await dappcord.totalChannels(1);\n    console.log(totalChannels.toString());\n    window.ethereum.on('accountsChanged', async () => {\n      window.location.reload();\n    });\n  };\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      account: account,\n      setAccount: setAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(Servers, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Channels, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Eg353MfQC4Yx2x/oTOel5j3IqEY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","io","Navigation","Servers","Channels","Messages","Dappcord","config","App","account","setAccount","provider","setProvider","dappcord","setDappcord","loadBlockchainData","providers","Web3Provider","window","ethereum","network","getNetwork","Contract","chainId","address","totalChannels","console","log","toString","on","location","reload"],"sources":["/Users/rudrabhaskar/Desktop/discord_dapp/dappcord/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { io } from \"socket.io-client\"\n\n// Components\nimport Navigation from './components/Navigation'\nimport Servers from './components/Servers'\nimport Channels from './components/Channels'\nimport Messages from './components/Messages'\n\n// ABIs\nimport Dappcord from './abis/Dappcord.json'\n\n// Config\nimport config from './config.json';\n\n// Socket\n// const socket = io('ws://localhost:3030');\n\nfunction App() {\n\n  const [account, setAccount] = useState(null)\n  const [provider, setProvider] = useState(null)\n  const [dappcord, setDappcord] = useState(null)\n\n\n\n  const loadBlockchainData = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    setProvider(provider)\n\n    const network = await provider.getNetwork()\n    const dappcord = new ethers.Contract(config[network.chainId].Dappcord.address, Dappcord, provider)\n    setDappcord(dappcord)\n\n    const totalChannels = await dappcord.totalChannels(1)\n    console.log(totalChannels.toString())\n\n    window.ethereum.on('accountsChanged', async () => {\n      window.location.reload()\n    })\n\n  }\n\n  useEffect(() => {\n    loadBlockchainData()\n  }, [])\n\n  return (\n    <div>\n\n      <Navigation account={account} setAccount={setAccount} />\n      {/* <h1>{account}</h1> */}\n      <main>\n        <Servers />\n        <Channels />\n        <Messages />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,EAAE,QAAQ,kBAAkB;;AAErC;AACA,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,QAAQ,MAAM,uBAAuB;;AAE5C;AACA,OAAOC,QAAQ,MAAM,sBAAsB;;AAE3C;AACA,OAAOC,MAAM,MAAM,eAAe;;AAElC;AACA;AAAA;AAEA,SAASC,GAAG,GAAG;EAAA;EAEb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAI9C,MAAMgB,kBAAkB,GAAG,YAAY;IACrC,MAAMJ,QAAQ,GAAG,IAAIX,MAAM,CAACgB,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;IACnEP,WAAW,CAACD,QAAQ,CAAC;IAErB,MAAMS,OAAO,GAAG,MAAMT,QAAQ,CAACU,UAAU,EAAE;IAC3C,MAAMR,QAAQ,GAAG,IAAIb,MAAM,CAACsB,QAAQ,CAACf,MAAM,CAACa,OAAO,CAACG,OAAO,CAAC,CAACjB,QAAQ,CAACkB,OAAO,EAAElB,QAAQ,EAAEK,QAAQ,CAAC;IAClGG,WAAW,CAACD,QAAQ,CAAC;IAErB,MAAMY,aAAa,GAAG,MAAMZ,QAAQ,CAACY,aAAa,CAAC,CAAC,CAAC;IACrDC,OAAO,CAACC,GAAG,CAACF,aAAa,CAACG,QAAQ,EAAE,CAAC;IAErCV,MAAM,CAACC,QAAQ,CAACU,EAAE,CAAC,iBAAiB,EAAE,YAAY;MAChDX,MAAM,CAACY,QAAQ,CAACC,MAAM,EAAE;IAC1B,CAAC,CAAC;EAEJ,CAAC;EAEDjC,SAAS,CAAC,MAAM;IACdiB,kBAAkB,EAAE;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE;IAAA,wBAEE,QAAC,UAAU;MAAC,OAAO,EAAEN,OAAQ;MAAC,UAAU,EAAEC;IAAW;MAAA;MAAA;MAAA;IAAA,QAAG,eAExD;MAAA,wBACE,QAAC,OAAO;QAAA;QAAA;QAAA;MAAA,QAAG,eACX,QAAC,QAAQ;QAAA;QAAA;QAAA;MAAA,QAAG,eACZ,QAAC,QAAQ;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QACP;EAAA;IAAA;IAAA;IAAA;EAAA,QACH;AAEV;AAAC,GAzCQF,GAAG;AAAA,KAAHA,GAAG;AA2CZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}